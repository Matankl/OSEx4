matankl@matankl-VMware-Virtual-Platform:~/code/OSEx4/p5$ valgrind --leak-check=full ./hello
==26258== Memcheck, a memory error detector
==26258== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==26258== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==26258== Command: ./hello
==26258== 
==26258== Conditional jump or move depends on uninitialised value(s)
==26258==    at 0x10966C: main (hello.c:16)
==26258== 
You entered: ./hello
==26258== 
==26258== HEAP SUMMARY:
==26258==     in use at exit: 9 bytes in 1 blocks
==26258==   total heap usage: 6 allocs, 5 frees, 31,097 bytes allocated
==26258== 
==26258== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
==26258==    at 0x4846828: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==26258==    by 0x109661: main (hello.c:13)
==26258== 
==26258== LEAK SUMMARY:
==26258==    definitely lost: 9 bytes in 1 blocks
==26258==    indirectly lost: 0 bytes in 0 blocks
==26258==      possibly lost: 0 bytes in 0 blocks
==26258==    still reachable: 0 bytes in 0 blocks
==26258==         suppressed: 0 bytes in 0 blocks
==26258== 
==26258== Use --track-origins=yes to see where uninitialised values come from
==26258== For lists of detected and suppressed errors, rerun with: -s
==26258== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)



<!-- so the problem here is usin         string = malloc(length+1); 
in line 13 without free the storage -->
